var areaJSON='{"columns":["", "ALUTs", "FFs", "RAMs", "DSPs", "MLABs", "Details"], "debug_enabled":"true", "type":"module", "total_percent":[4.15667, 2.48918, 1.87343, 2.61428, 0.176768], "total":[32944, 52660, 179, 7, 102], "name":"Kernel System", "max_resources":[1405440, 2810880, 6847, 3960, 70272], "children":[{"name":"Static Partition", "type":"partition", "children":[{"name":"Board interface", "type":"resource", "data":[13132, 20030, 112, 0, 0], "details":[{"type":"text", "text":"Platform interface logic."}]}]}, {"name":"Global interconnect", "type":"resource", "data":[2338, 4125, 0, 0, 0], "details":[{"type":"text", "text":"Global interconnect for 1 global load and 1 global store."}, {"type":"brief", "text":"For 1 global load and 1 global store."}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Global Memory Interconnect", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/mwh1391807516407.html#hnj1476724450050"}]}]}, {"name":"System description ROM", "type":"resource", "data":[2, 71, 2, 0, 0], "details":[{"type":"text", "text":"This read-only memory contains information for the host about the system and about each kernel in the system, including kernel names, arguments, and attributes. The system description ROM ensures that the binary image on the FPGA is compatible with the host program."}, {"type":"brief", "text":"Contains information for the host."}]}, {"name":"apply_watermark", "compute_units":1, "type":"function", "total_percent":[2.28169, 1.38832, 1.01157, 0.949321, 0.176768], "total_kernel_resources":[17472, 28434, 65, 7, 102], "details":[{"type":"text", "text":"Number of compute units: 1"}, {"type":"text", "text":"Kernel attribute \'uses_global_work_offset\' not specified. Add \'__attribute__((uses_global_work_offset(0)))\' to reduce area utilization if the kernel will always be enqueued with a 0 or NULL global_work_offset argument in clEnqueueNDRangeKernel. Add \'__attribute__((uses_global_work_offset(1)))\' to hide this suggestion without affecting kernel functionality."}, {"type":"brief", "text":"1 compute unit.\\nKernel attribute \'uses_global_work_offset\' not specified. Add \'__attribute__((uses_global_work_offset(0)))\' to reduce area utilization if the kernel will always be enqueued with a 0 or NULL global_work_offset argument in clEnqueueNDRangeKernel. Add \'__attribute__((uses_global_work_offset(1)))\' to hide this suggestion without affecting kernel functionality."}], "children":[{"name":"Function overhead", "type":"resource", "data":[1463, 1467, 0, 0, 6], "details":[{"type":"text", "text":"Kernel dispatch logic."}, {"type":"brief", "text":"Kernel dispatch logic."}]}, {"name":"Private Variable: \\n - \'idx\' (watermarking.cl:96)", "type":"resource", "data":[16, 130, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":96}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 32"}, {"type":"text", "text":"1 register of width 33"}, {"type":"brief", "text":"Register,\\n1 reg, 32 width,\\n1 reg, 33 width"}]}, {"name":"Private Variable: \\n - \'x\' (watermarking.cl:93)", "type":"resource", "data":[8, 64, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":93}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 32"}, {"type":"brief", "text":"Register,\\n1 reg, 32 width"}]}, {"name":"apply_watermark.B0", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[128, 1206, 0, 0, 10], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[128, 1168, 0, 0, 10]}, {"name":"watermarking.cl:93", "type":"resource", "data":[0, 4, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":93}]]}, {"name":"watermarking.cl:96", "type":"resource", "data":[0, 34, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":96}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[11, 10, 1, 0, 0], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"watermarking.cl:93", "type":"resource", "data":[632, 492, 4, 7, 0], "debug":[[{"filename":"watermarking.cl", "line":93}]], "children":[{"name":"32-bit Integer Divide", "type":"resource", "count":1, "data":[632, 492, 4, 7, 0]}], "replace_name":"true"}, {"name":"watermarking.cl:96", "type":"resource", "data":[143, 33, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":96}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":1, "data":[32, 0, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":2, "data":[46, 1, 0, 0, 0]}, {"name":"32-bit Select", "type":"resource", "count":1, "data":[32, 32, 0, 0, 0]}, {"name":"33-bit Integer Add", "type":"resource", "count":1, "data":[33, 0, 0, 0, 0]}], "replace_name":"true"}]}]}, {"name":"apply_watermark.B2", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[933, 15043, 8, 0, 55], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[933, 15043, 8, 0, 55]}]}, {"name":"Feedback", "type":"resource", "data":[65, 9, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"watermarking.cl:93", "type":"resource", "data":[33, 0, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":93}]]}, {"name":"watermarking.cl:96", "type":"resource", "data":[32, 9, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":96}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[397, 761, 20, 0, 0], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"watermarking.cl:93", "type":"resource", "data":[53, 0, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":93}]], "children":[{"name":"32-bit Select", "type":"resource", "count":1, "data":[26, 0, 0, 0, 0]}, {"name":"33-bit Select", "type":"resource", "count":1, "data":[27, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"watermarking.cl:96", "type":"resource", "data":[110, 1, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":96}]], "children":[{"name":"1-bit And", "type":"resource", "count":1, "data":[1, 0, 0, 0, 0]}, {"name":"1-bit Xor", "type":"resource", "count":2, "data":[1, 1, 0, 0, 0]}, {"name":"32-bit Integer Add", "type":"resource", "count":2, "data":[64, 0, 0, 0, 0]}, {"name":"33-bit Integer Add", "type":"resource", "count":1, "data":[33, 0, 0, 0, 0]}, {"name":"33-bit Integer Compare", "type":"resource", "count":1, "data":[11, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"watermarking.cl:99", "type":"resource", "data":[32, 0, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":99}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":1, "data":[32, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"watermarking.cl:104", "type":"resource", "data":[2198, 3246, 16, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":104}]], "children":[{"name":"Load", "type":"resource", "count":1, "data":[2198, 3246, 16, 0, 0], "details":[{"type":"brief", "text":"Burst-coalesced non-aligned LSU"}, {"type":"text", "text":"Load uses a Burst-coalesced non-aligned LSU.  Use Dynamic Profiler to determine performance impact of this LSU."}]}], "replace_name":"true"}, {"name":"watermarking.cl:107", "type":"resource", "data":[4641, 32, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":107}]], "children":[{"name":"32-bit Integer Remainder", "type":"resource", "count":1, "data":[4641, 32, 0, 0, 0], "details":[{"type":"text", "text":"Implemented using inlined soft-IP."}]}], "replace_name":"true"}, {"name":"watermarking.cl:112", "type":"resource", "data":[87, 1, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":112}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":1, "data":[4, 0, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":1, "data":[35, 1, 0, 0, 0]}, {"name":"32-bit Integer Subtract", "type":"resource", "count":1, "data":[32, 0, 0, 0, 0]}, {"name":"32-bit Select", "type":"resource", "count":1, "data":[16, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"watermarking.cl:120", "type":"resource", "data":[480, 0, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":120}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":15, "data":[480, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"watermarking.cl:122", "type":"resource", "data":[752, 80, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":122}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":16, "data":[64, 0, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":16, "data":[560, 16, 0, 0, 0]}, {"name":"32-bit Integer Subtract", "type":"resource", "count":16, "data":[64, 0, 0, 0, 0]}, {"name":"32-bit Select", "type":"resource", "count":16, "data":[64, 64, 0, 0, 0]}], "replace_name":"true"}, {"name":"watermarking.cl:129", "type":"resource", "data":[0, 0, 16, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":129}]], "children":[{"name":"On-chip Read-Only Memory Lookup", "type":"resource", "count":16, "data":[0, 0, 16, 0, 0], "details":[{"type":"brief", "text":"Read from 8192 bit ROM. "}, {"type":"text", "text":"Read from 8192 bit ROM. A copy of the ROM is created for each access."}]}], "replace_name":"true"}, {"name":"watermarking.cl:129 > watermarking.cl:161", "type":"resource", "data":[768, 16, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":129}, {"filename":"watermarking.cl", "line":161}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":16, "data":[144, 0, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":16, "data":[560, 16, 0, 0, 0]}, {"name":"32-bit Select", "type":"resource", "count":16, "data":[64, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"watermarking.cl:129 > watermarking.cl:168", "type":"resource", "data":[768, 16, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":129}, {"filename":"watermarking.cl", "line":168}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":16, "data":[144, 0, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":16, "data":[560, 16, 0, 0, 0]}, {"name":"32-bit Select", "type":"resource", "count":16, "data":[64, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"watermarking.cl:129 > watermarking.cl:175", "type":"resource", "data":[768, 16, 0, 0, 0], "debug":[[{"filename":"watermarking.cl", "line":129}, {"filename":"watermarking.cl", "line":175}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":16, "data":[144, 0, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":16, "data":[560, 16, 0, 0, 0]}, {"name":"32-bit Select", "type":"resource", "count":16, "data":[64, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"watermarking.cl:136", "type":"resource", "data":[3019, 5811, 0, 0, 31], "debug":[[{"filename":"watermarking.cl", "line":136}]], "children":[{"name":"Store", "type":"resource", "count":1, "data":[3019, 5811, 0, 0, 31], "details":[{"type":"brief", "text":"Burst-coalesced non-aligned LSU"}, {"type":"text", "text":"Store uses a Burst-coalesced non-aligned LSU.  Use Dynamic Profiler to determine performance impact of this LSU."}]}], "replace_name":"true"}]}]}]}]}';
var area_srcJSON='{"children":[{"children":[{"data":[13132,20030,112,0,0],"details":[{"text":"Platform interface logic.","type":"text"}],"name":"Board interface","type":"resource"}],"name":"Static Partition","type":"partition"},{"data":[2338,4125,0,0,0],"details":[{"text":"Global interconnect for 1 global load and 1 global store.","type":"text"},{"text":"For 1 global load and 1 global store.","type":"brief"},{"links":[{"guide":"Best Practices Guide : Global Memory Interconnect","link":"https://www.intel.com/content/www/us/en/programmable/documentation/mwh1391807516407.html#hnj1476724450050"}],"text":"See %L for more information","type":"text"}],"name":"Global interconnect","type":"resource"},{"data":[2,71,2,0,0],"details":[{"text":"This read-only memory contains information for the host about the system and about each kernel in the system, including kernel names, arguments, and attributes. The system description ROM ensures that the binary image on the FPGA is compatible with the host program.","type":"text"},{"text":"Contains information for the host.","type":"brief"}],"name":"System description ROM","type":"resource"},{"children":[{"data":[473,780,21,0,0],"details":[{"text":"Feedback+Cluster logic","type":"brief"}],"name":"Data control overhead","type":"resource"},{"data":[1463,1467,0,0,6],"details":[{"text":"Kernel dispatch logic.","type":"text"},{"text":"Kernel dispatch logic.","type":"brief"}],"name":"Function overhead","type":"resource"},{"data":[16,130,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"text":"1 register of width 32","type":"text"},{"text":"1 register of width 33","type":"text"},{"text":"Register,\\n1 reg, 32 width,\\n1 reg, 33 width","type":"brief"}],"name":"Private Variable: \\n - \'idx\' (watermarking.cl:96)","type":"resource"},{"data":[8,64,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"text":"1 register of width 32","type":"text"},{"text":"Register,\\n1 reg, 32 width","type":"brief"}],"name":"Private Variable: \\n - \'x\' (watermarking.cl:93)","type":"resource"},{"children":[{"count":2,"data":[1061,16211,8,0,65],"debug":[[{"filename":"","line":0}]],"name":"State","type":"resource"}],"data":[1061,16211,8,0,65],"name":"No Source Line","type":"resource"},{"children":[{"count":1,"data":[0,4,0,0,0],"debug":[[{"filename":"watermarking.cl","line":93}]],"name":"State","type":"resource"},{"count":1,"data":[632,492,4,7,0],"debug":[[{"filename":"watermarking.cl","line":93}]],"name":"32-bit Integer Divide","type":"resource"},{"count":1,"data":[26,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":93}]],"name":"32-bit Select","type":"resource"},{"count":1,"data":[27,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":93}]],"name":"33-bit Select","type":"resource"}],"data":[685,496,4,7,0],"debug":[[{"filename":"watermarking.cl","line":93}]],"name":"watermarking.cl:93","type":"resource"},{"children":[{"count":1,"data":[0,34,0,0,0],"debug":[[{"filename":"watermarking.cl","line":96}]],"name":"State","type":"resource"},{"count":3,"data":[96,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":96}]],"name":"32-bit Integer Add","type":"resource"},{"count":2,"data":[46,1,0,0,0],"debug":[[{"filename":"watermarking.cl","line":96}]],"name":"32-bit Integer Compare","type":"resource"},{"count":1,"data":[32,32,0,0,0],"debug":[[{"filename":"watermarking.cl","line":96}]],"name":"32-bit Select","type":"resource"},{"count":2,"data":[66,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":96}]],"name":"33-bit Integer Add","type":"resource"},{"count":1,"data":[1,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":96}]],"name":"1-bit And","type":"resource"},{"count":2,"data":[1,1,0,0,0],"debug":[[{"filename":"watermarking.cl","line":96}]],"name":"1-bit Xor","type":"resource"},{"count":1,"data":[11,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":96}]],"name":"33-bit Integer Compare","type":"resource"}],"data":[253,68,0,0,0],"debug":[[{"filename":"watermarking.cl","line":96}]],"name":"watermarking.cl:96","type":"resource"},{"children":[{"count":1,"data":[32,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":99}]],"name":"32-bit Integer Add","type":"resource"}],"data":[32,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":99}]],"name":"watermarking.cl:99","replace_name":"true","type":"resource"},{"children":[{"count":1,"data":[2198,3246,16,0,0],"debug":[[{"filename":"watermarking.cl","line":104}]],"name":"Load","type":"resource"}],"data":[2198,3246,16,0,0],"debug":[[{"filename":"watermarking.cl","line":104}]],"name":"watermarking.cl:104","replace_name":"true","type":"resource"},{"children":[{"count":1,"data":[4641,32,0,0,0],"debug":[[{"filename":"watermarking.cl","line":107}]],"name":"32-bit Integer Remainder","type":"resource"}],"data":[4641,32,0,0,0],"debug":[[{"filename":"watermarking.cl","line":107}]],"name":"watermarking.cl:107","replace_name":"true","type":"resource"},{"children":[{"count":1,"data":[4,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":112}]],"name":"32-bit Integer Add","type":"resource"},{"count":1,"data":[35,1,0,0,0],"debug":[[{"filename":"watermarking.cl","line":112}]],"name":"32-bit Integer Compare","type":"resource"},{"count":1,"data":[32,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":112}]],"name":"32-bit Integer Subtract","type":"resource"},{"count":1,"data":[16,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":112}]],"name":"32-bit Select","type":"resource"}],"data":[87,1,0,0,0],"debug":[[{"filename":"watermarking.cl","line":112}]],"name":"watermarking.cl:112","replace_name":"true","type":"resource"},{"children":[{"count":15,"data":[480,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":120}]],"name":"32-bit Integer Add","type":"resource"}],"data":[480,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":120}]],"name":"watermarking.cl:120","replace_name":"true","type":"resource"},{"children":[{"count":16,"data":[64,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":122}]],"name":"32-bit Integer Add","type":"resource"},{"count":16,"data":[560,16,0,0,0],"debug":[[{"filename":"watermarking.cl","line":122}]],"name":"32-bit Integer Compare","type":"resource"},{"count":16,"data":[64,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":122}]],"name":"32-bit Integer Subtract","type":"resource"},{"count":16,"data":[64,64,0,0,0],"debug":[[{"filename":"watermarking.cl","line":122}]],"name":"32-bit Select","type":"resource"}],"data":[752,80,0,0,0],"debug":[[{"filename":"watermarking.cl","line":122}]],"name":"watermarking.cl:122","replace_name":"true","type":"resource"},{"children":[{"count":16,"data":[0,0,16,0,0],"debug":[[{"filename":"watermarking.cl","line":129}]],"name":"On-chip Read-Only Memory Lookup","type":"resource"},{"children":[{"count":16,"data":[144,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":129}]],"name":"32-bit Integer Add","type":"resource"},{"count":16,"data":[560,16,0,0,0],"debug":[[{"filename":"watermarking.cl","line":129}]],"name":"32-bit Integer Compare","type":"resource"},{"count":16,"data":[64,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":129}]],"name":"32-bit Select","type":"resource"}],"data":[768,16,0,0,0],"debug":[[{"filename":"watermarking.cl","line":129},{"filename":"watermarking.cl","line":161}]],"name":"watermarking.cl:129 > watermarking.cl:161","replace_name":true,"type":"resource"},{"children":[{"count":16,"data":[144,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":129}]],"name":"32-bit Integer Add","type":"resource"},{"count":16,"data":[560,16,0,0,0],"debug":[[{"filename":"watermarking.cl","line":129}]],"name":"32-bit Integer Compare","type":"resource"},{"count":16,"data":[64,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":129}]],"name":"32-bit Select","type":"resource"}],"data":[768,16,0,0,0],"debug":[[{"filename":"watermarking.cl","line":129},{"filename":"watermarking.cl","line":168}]],"name":"watermarking.cl:129 > watermarking.cl:168","replace_name":true,"type":"resource"},{"children":[{"count":16,"data":[144,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":129}]],"name":"32-bit Integer Add","type":"resource"},{"count":16,"data":[560,16,0,0,0],"debug":[[{"filename":"watermarking.cl","line":129}]],"name":"32-bit Integer Compare","type":"resource"},{"count":16,"data":[64,0,0,0,0],"debug":[[{"filename":"watermarking.cl","line":129}]],"name":"32-bit Select","type":"resource"}],"data":[768,16,0,0,0],"debug":[[{"filename":"watermarking.cl","line":129},{"filename":"watermarking.cl","line":175}]],"name":"watermarking.cl:129 > watermarking.cl:175","replace_name":true,"type":"resource"}],"data":[2304,48,16,0,0],"debug":[[{"filename":"watermarking.cl","line":129}]],"name":"watermarking.cl:129","replace_name":"true","type":"resource"},{"children":[{"count":1,"data":[3019,5811,0,0,31],"debug":[[{"filename":"watermarking.cl","line":136}]],"name":"Store","type":"resource"}],"data":[3019,5811,0,0,31],"debug":[[{"filename":"watermarking.cl","line":136}]],"name":"watermarking.cl:136","replace_name":"true","type":"resource"}],"compute_units":1,"data":[17472,28434,65,7,102],"debug":[[{"filename":"watermarking.cl","line":93}]],"details":[{"text":"Number of compute units: 1","type":"text"},{"text":"Kernel attribute \'uses_global_work_offset\' not specified. Add \'__attribute__((uses_global_work_offset(0)))\' to reduce area utilization if the kernel will always be enqueued with a 0 or NULL global_work_offset argument in clEnqueueNDRangeKernel. Add \'__attribute__((uses_global_work_offset(1)))\' to hide this suggestion without affecting kernel functionality.","type":"text"},{"text":"1 compute unit.\\nKernel attribute \'uses_global_work_offset\' not specified. Add \'__attribute__((uses_global_work_offset(0)))\' to reduce area utilization if the kernel will always be enqueued with a 0 or NULL global_work_offset argument in clEnqueueNDRangeKernel. Add \'__attribute__((uses_global_work_offset(1)))\' to hide this suggestion without affecting kernel functionality.","type":"brief"}],"name":"apply_watermark","total_kernel_resources":[17472,28434,65,7,102],"total_percent":[2.28169,1.38832,1.01157,0.949321,0.176768],"type":"function"}],"columns":["","ALUTs","FFs","RAMs","DSPs","MLABs","Details"],"data":[19812,32630,67,7,102],"debug_enabled":"true","max_resources":[1405440,2810880,6847,3960,70272],"name":"Kernel System","total":[32944,52660,179,7,102],"total_percent":[4.15667,2.48918,1.87343,2.61428,0.176768],"type":"module"}';
var mavJSON='{"nodes":[{"type":"kernel", "id":2, "name":"apply_watermark", "children":[{"type":"bb", "id":3, "name":"apply_watermark.B0", "details":[{"type":"table", "Latency":"83"}]}, {"type":"bb", "id":4, "name":"apply_watermark.B1", "details":[{"type":"table", "Latency":"0"}]}, {"type":"bb", "id":5, "name":"apply_watermark.B2", "children":[{"type":"inst", "id":6, "name":"Load", "debug":[[{"filename":"watermarking.cl", "line":104}]], "details":[{"type":"table", "Width":"512 bits", "Type":"Burst-coalesced non-aligned", "Stall-free":"No", "Start Cycle":"131", "Latency":"202", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/mwh1391807516407.html#yeo1491314105959"}]}]}]}, {"type":"inst", "id":7, "name":"Store", "debug":[[{"filename":"watermarking.cl", "line":136}]], "details":[{"type":"table", "Width":"512 bits", "Type":"Burst-coalesced non-aligned", "Stall-free":"No", "Start Cycle":"381", "Latency":"2", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/mwh1391807516407.html#yeo1491314105959"}]}]}]}, {"type":"inst", "id":8, "name":"Loop Input", "debug":[[{"filename":"watermarking.cl", "line":96}]], "details":[{"type":"table", "Start Cycle":"0", "Latency":"1", "Loops To":"9"}]}, {"type":"inst", "id":9, "name":"Loop End", "details":[{"type":"table", "Start Cycle":"383", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"383", "II":"1", "Subloops":"No", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":""}]}]}, {"type":"memtype", "id":1, "name":"Global Memory", "children":[{"type":"memsys", "id":10, "name":"HBM2", "details":[{"type":"table", "Number of banks":"1"}]}, {"type":"memsys", "id":11, "name":"HBM1", "details":[{"type":"table", "Number of banks":"1"}]}]}], "links":[{"from":9, "to":4}, {"from":3, "to":8}, {"from":6, "to":9}, {"from":7, "to":9}, {"from":8, "to":6}, {"from":6, "to":7}, {"from":7, "to":10}, {"from":11, "to":6}]}';
var loopsJSON='{"columns":["", "Pipelined", "II", "Speculated iterations", "Details"], "children":[{"name":"Kernel: apply_watermark", "data":["", "", ""], "debug":[[{"filename":"watermarking.cl", "line":59}]], "details":[{"type":"brief", "text":"Single work-item execution"}, {"type":"text", "text":"Single work-item execution"}, {"type":"text", "text":"Fmax bottlenck block: apply_watermark.B2"}, {"type":"text", "text":"Use the %L report to view more details", "links":[{"view":"Fmax II Report"}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Kernels", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/mwh1391807516407.html#ipp1476408832230"}]}], "children":[{"name":"apply_watermark.B2", "data":["Yes", "~1", "9"], "debug":[[{"filename":"watermarking.cl", "line":96}]], "details":[{"type":"brief", "text":" "}, {"type":"text", "text":"Hyper-Optimized loop structure: enabled."}, {"type":"text", "text":"II is an approximation due to the following stallable instructions:", "details":[{"type":"text", "text":"Load Operation (%L)", "links":[{"filename":"watermarking.cl", "line":"104"}]}, {"type":"text", "text":"Store Operation (%L)", "links":[{"filename":"watermarking.cl", "line":"136"}]}]}, {"type":"text", "text":"Maximum concurrent iterations: Capacity of loop", "details":[{"type":"text", "text":"Use the %L viewer to estimate capacity", "links":[{"view":"Fmax II Report"}]}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Loops in a Single Work-Item Kernel", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/mwh1391807516407.html#wfa1476380079940"}]}], "children":[{"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"watermarking.cl", "line":103}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"watermarking.cl", "line":118}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"watermarking.cl", "line":135}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}]}]}]}';
var fmax_iiJSON='{"basicblocks":{"apply_watermark.B0":{"name":"apply_watermark.B0", "target_fmax":"Not specified", "target_ii":"Not specified", "achieved_fmax":"480.0", "achieved_ii":1, "latency":83, "max_interleaving":1, "is_fmax_bottleneck":"No", "is_loop_header":"No", "is_single_block_loop":"No", "loop_layer":0, "loop_location":{}}, "apply_watermark.B1":{"name":"apply_watermark.B1", "target_fmax":"Not specified", "target_ii":"Not specified", "achieved_fmax":"480.0", "achieved_ii":1, "latency":0, "max_interleaving":1, "is_fmax_bottleneck":"No", "is_loop_header":"No", "is_single_block_loop":"No", "loop_layer":0, "loop_location":{}}, "apply_watermark.B2":{"name":"apply_watermark.B2", "target_fmax":"Not specified", "target_ii":"Not specified", "achieved_fmax":"186.0", "achieved_ii":1, "latency":383, "max_interleaving":1, "is_fmax_bottleneck":"Yes", "is_loop_header":"Yes", "is_single_block_loop":"Yes", "loop_layer":1, "details":[{"type":"text", "text":"Variable on loop carried feedback path"}, {"type":"text", "text":"Loop feedback path that lowered Fmax ", "details":[{"type":"text", "text":"Node: 32-bit Select Operation (%L)", "links":[{"filename":"watermarking.cl", "line":"93"}]}, {"type":"text", "text":"Node: 32-bit Integer Compare Operation (%L)", "links":[{"filename":"watermarking.cl", "line":"112"}]}, {"type":"text", "text":"Node: 32-bit Integer Subtract Operation (%L)", "links":[{"filename":"watermarking.cl", "line":"112"}]}, {"type":"text", "text":"Node: 32-bit Integer Add Operation (%L)", "links":[{"filename":"watermarking.cl", "line":"96"}]}]}], "loop_location":{"details":[{"type":"text", "text":"Loop:  (%L)", "links":[{"filename":"watermarking.cl", "line":"96"}]}]}}}, "functions":{"apply_watermark":{"debug":[{"filename":"watermarking.cl", "line":59}], "loop_hierachy":{"apply_watermark__no_loop":["apply_watermark.B0", "apply_watermark.B1"], "apply_watermark.B2":["apply_watermark.B2"]}}}}';
var summaryJSON='{"performanceSummary":{"name":"Kernel Summary", "columns":["Kernel Name", "Kernel Type", "Autorun", "Workgroup Size", "# Compute Units", "Hyper-Optimized Handshaking"], "children":[{"name":"apply_watermark", "data":["Single work-item", "No", [1, 1, 1], 1, "On"], "details":[{"type":"text", "text":"Kernel type: Single work-item"}, {"type":"text", "text":"Required workgroup size: (1, 1, 1)"}, {"type":"text", "text":"Maximum workgroup size: 1"}], "debug":[[{"filename":"watermarking.cl", "line":59}]]}]}, "estimatedResources":{"name":"Estimated Resource Usage", "columns":["Kernel Name", "ALUTs ", "FFs  ", "RAMs ", "DSPs ", "MLABs"], "children":[{"name":"apply_watermark", "data":[17472, 28434, 65, 7, 102], "debug":[[{"filename":"watermarking.cl", "line":59}]]}, {"name":"Global Interconnect", "classes":["summary-highlight", "nohover"], "data":[2338, 4125, 0, 0, 0]}, {"name":"Board Interface", "classes":["summary-highlight", "nohover"], "data":[13132, 20030, 112, 0, 0]}, {"name":"System description ROM", "classes":["summary-highlight", "nohover"], "data":[2, 71, 2, 0, 0]}, {"name":"Total", "classes":["summary-highlight", "nohover"], "data":[32944, 52660, 179, 7, 102], "data_percent":[2.34403, 1.87343, 2.61428, 0.176768]}, {"name":"Available", "classes":["summary-highlight", "nohover"], "data":[1405440, 2810880, 6847, 3960, 0]}]}, "compileWarnings":{"name":"Compile Warnings", "children":[{"name":"Load uses a Burst-coalesced non-aligned LSU", "details":[{"type":"text", "text":"Use Dynamic Profiler to determine performance impact of this LSU."}], "debug":[[{"filename":"watermarking.cl", "line":104}]]}, {"name":"Store uses a Burst-coalesced non-aligned LSU", "details":[{"type":"text", "text":"Use Dynamic Profiler to determine performance impact of this LSU."}], "debug":[[{"filename":"watermarking.cl", "line":136}]]}]}}';
var infoJSON='{"name":"Info","rows":[{"classes":["info-table"],"data":["watermark_MX"],"name":"Project Name"},{"data":["Stratix 10, 1SM21BHU2F53E2VGS1, s10mx_ref:s10mx_hbm_es"],"name":"Target Family, Device, Board"},{"data":["19.4.0 Build 64"],"name":"AOC Version"},{"data":["19.4.0 Build 64 Pro"],"name":"Quartus Version"},{"data":["aoc -profile -report -v watermarking.cl -board-package=/mnt/extra/Angelica/exm_binary/stratixMX/BSPMX/s10mx_ref -o watermark_MX.aocx"],"name":"Command"},{"data":["Mon Aug 31 14:00:05 2020"],"name":"Reports Generated At"}]}';
var warningsJSON='{"rows":[]}';
var quartusJSON='{"quartusFitClockSummary":{  "name":"Quartus Fit Clock Summary"  ,"columns":["", "Kernel fmax"]  ,"children":[  {    "name":"Frequency (MHz)","data":[278.00]  }]},"quartusFitResourceUsageSummary":{  "name":"Quartus Fit Resource Utilization Summary"  ,"columns":["", "ALMs", "FFs", "RAMs", "DSPs", "MLABs"]  ,"children":[  {"name":"apply_watermark","data":[15595.8 ,37655 ,71 ,10 ,118]  }]}}';
var fileJSON=[{"path":"/mnt/extra/Angelica/exm_binary/stratixMX/exm_MX/WM/watermarking.cl", "name":"watermarking.cl", "has_active_debug_locs":false, "absName":"/mnt/extra/Angelica/exm_binary/stratixMX/exm_MX/WM/watermarking.cl", "content":"/**********\012Copyright (c) 2018, Xilinx, Inc.\012All rights reserved.\012Redistribution and use in source and binary forms, with or without modification,\012are permitted provided that the following conditions are met:\0121. Redistributions of source code must retain the above copyright notice,\012this list of conditions and the following disclaimer.\0122. Redistributions in binary form must reproduce the above copyright notice,\012this list of conditions and the following disclaimer in the documentation\012and/or other materials provided with the distribution.\0123. Neither the name of the copyright holder nor the names of its contributors\012may be used to endorse or promote products derived from this software\012without specific prior written permission.\012THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\012ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\012THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\012IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\012INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\012PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\012HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\012OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\012EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\012**********/\012\012/*******************************************************************************\012Description: \012    This example demonstrate to utilized both DDR and full bandwidth using \012    watermark Application. In Watermark application, kernel has to apply a fixed\012    watermark (Here is it Xilinx First Character 'X') into a given Image and \012    write the output image.\012    Inside Host code, input image is placed into Bank0 and Kernel will read\012    input Image and write the output image to Bank1.\012    To utilized the both Banks fully Kernel code do burst read input image with \012    full datawidth of 512 and do the burst write of output image with full \012    datawidth of 512. \012    As Kernel is accessing Sequentially from both the DDR, so kernel with get the\012    Best memory access bandwidth from both DDRs and will do watermark with good \012    performance.\012*******************************************************************************/\012//Image shoul be multiple of 16\012\012\012//Water Mark Defines\012#define CHANNELS  3     //Three Channels (R, G and B)\012#define WATERMARK_HEIGHT 16\012#define WATERMARK_WIDTH 16\012\012//Using Datatype uint16 to get the full memory datawidth 512\012#define TYPE uint\012\012//Per Memory Access getting 16 pixels\012#define DATA_SIZE 16\012\012\012//function declaration\012uint saturatedAdd(uint x, uint y);\012\012__kernel\012void apply_watermark(__global const  __attribute((buffer_location(\"HBM1\"))) TYPE * __restrict input, \012					__global  __attribute((buffer_location(\"HBM2\"))) TYPE * __restrict output, \012					int width, int height,\012					const unsigned int iterations, \012					const unsigned int offset) {\012    \012    //WaterMark Image of 16x16 size\012    int watermark[WATERMARK_HEIGHT][WATERMARK_WIDTH] = \012    {\012      { 0, 0,        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,        0 },\012      { 0, 0x0f0f0f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0f0f0f, 0 },\012      { 0, 0, 0x0f0f0f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0f0f0f, 0, 0 }, \012      { 0, 0, 0, 0x0f0f0f, 0, 0, 0, 0, 0, 0, 0, 0, 0x0f0f0f, 0, 0, 0 },\012      { 0, 0, 0, 0, 0x0f0f0f, 0, 0, 0, 0, 0, 0, 0x0f0f0f, 0, 0, 0, 0 },\012      { 0, 0, 0, 0, 0, 0x0f0f0f, 0, 0, 0, 0, 0x0f0f0f, 0, 0, 0, 0, 0 },\012      { 0, 0, 0, 0, 0, 0, 0x0f0f0f, 0, 0, 0x0f0f0f, 0, 0, 0, 0, 0, 0 },\012      { 0, 0, 0, 0, 0, 0, 0, 0x0f0f0f, 0x0f0f0f, 0, 0, 0, 0, 0, 0, 0 },\012      { 0, 0, 0, 0, 0, 0, 0, 0x0f0f0f, 0x0f0f0f, 0, 0, 0, 0, 0, 0, 0 },\012      { 0, 0, 0, 0, 0, 0, 0x0f0f0f, 0, 0, 0x0f0f0f, 0, 0, 0, 0, 0, 0 },\012      { 0, 0, 0, 0, 0, 0x0f0f0f, 0, 0, 0, 0, 0x0f0f0f, 0, 0, 0, 0, 0 },\012      { 0, 0, 0, 0, 0x0f0f0f, 0, 0, 0, 0, 0, 0, 0x0f0f0f, 0, 0, 0, 0 },\012      { 0, 0, 0, 0x0f0f0f, 0, 0, 0, 0, 0, 0, 0, 0, 0x0f0f0f, 0, 0, 0 },\012      { 0, 0, 0x0f0f0f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0f0f0f, 0, 0 }, \012      { 0, 0x0f0f0f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0f0f0f, 0 },\012      { 0, 0,        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,        0 },\012    } ;\012    \012    // memory access by tiles that are specified in ,\012    // so calculating total number of Memory accesses which are needed to entire\012    // Image\012    uint size = iterations;//total number of pixels by rows \012\012    TYPE tmp [DATA_SIZE];\012\012    uint x=(offset/width)%WATERMARK_HEIGHT; \012    // Process the whole image \012    #pragma unroll\012    for (uint idx = 0, y = 0  ; idx < size ; ++idx, x+= DATA_SIZE)\012    {\012      //index with offset\012      uint index=offset+idx*DATA_SIZE;\012\012      // Read the next 16 Pixels\012      #pragma unroll\012      for (int i=0; i < DATA_SIZE; i++){\012        tmp[i]=input[i+index];\012      }\012      \012      uint rows_y= index%width;\012      uint y = rows_y%WATERMARK_WIDTH;\012             \012\012      // Row Boundary Check for x \012      if (x >= width){\012        x = x -width;\012        ++y;\012      }\012      //Unrolling below loop to process all 16 pixels concurrently\012      #pragma unroll\012      for ( int i = 0 ; i < DATA_SIZE ; i++)\012      {\012          uint tmp_x = x+i;\012          uint tmp_y = y;\012          if (tmp_x > width) {\012              tmp_x = tmp_x -width;\012              tmp_y +=1;\012           }\012          \012          uint w_idy = tmp_y % WATERMARK_HEIGHT;\012          uint w_idx = tmp_x % WATERMARK_WIDTH;\012          tmp[i]     = saturatedAdd(tmp[i], watermark[w_idy][w_idx]) ;\012      }\012\012      //Write the Next 16 Pixels result to output memory\012 \012       #pragma unroll\012       for (int i=0; i < DATA_SIZE; i++){\012         output[i+index] = tmp[i] ;\012       }\012     }\012}\012\012uint saturatedAdd(uint x, uint y)\012{\012    // Separate into the different channels\012\012    //Red Channel\012    uchar redX = x & 0xff ;\012    uchar redY = y & 0xff ;\012    uchar redOutput ;\012    \012    //Green Channel\012    uchar greenX = (x & 0xff00) >> 8 ;\012    uchar greenY = (y & 0xff00) >> 8 ;\012    uchar greenOutput ;\012    \012    //Blue Channel\012    uchar blueX = (x & 0xff0000) >> 16 ;\012    uchar blueY = (y & 0xff0000) >> 16 ;\012    uchar blueOutput ;\012    \012    //Calculating Red \012    if (redX + redY > 255){\012        redOutput = 255 ;\012    }else{\012      redOutput = redX + redY ;\012    }\012    \012    //Calculating Green\012    if (greenX + greenY > 255){\012      greenOutput = 255 ;\012    }else{\012      greenOutput = greenX + greenY ;\012    }\012    \012    //Calculating Blue\012    if (blueX + blueY > 255){\012      blueOutput = 255 ;\012    }else {\012      blueOutput = blueX + blueY ;\012    }\012   \012    // Combining all channels into one \012    uint combinedOutput = 0 ;\012    combinedOutput |= (uint) redOutput ;\012    combinedOutput |= (uint) (greenOutput << 8) ;\012    combinedOutput |= (uint) (blueOutput << 16) ;\012    return combinedOutput ;\012}\012"}];
